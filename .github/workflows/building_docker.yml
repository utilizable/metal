# building.yml
name: 'Building Docker'

on:
  # Trigger on each tag-push;
  push:
    tags:
      - '*'

  # Trigger major on default ref;
  workflow_dispatch:

jobs:

  # -----------------
  # Prepare: Find Dockerfile
  #
  gathering_informations:
    name: "Gathering Informations"
    runs-on: ubuntu-latest
    outputs:
      DOCKERFILE_PATH:     ${{ steps.dockerfile_find.outputs.DOCKERFILE_PATH }}
      DOCKERFILE_DIR:      ${{ steps.dockerfile_find.outputs.DOCKERFILE_DIR }}
      REPOSITORY_METADATA: ${{ steps.repository_metadata.outputs.json }}
      RELEASES_MATRIX:     ${{ steps.releases_matrix.outputs.RELEASES_MATRIX }}
    steps:

      # -----------------
      # Prepare: Checkout 
      #
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -----------------
      # Gathering Informations: Find Dockerfile
      #
      - name: 'Find Dockerfile'
        id: dockerfile_find
        shell: bash
        run: |
          DOCKERFILE_PATH=$(find ${PWD} -name "Dockerfile.*" -print -quit);

          # If no Dockerfile is found, exit with an error
          if [ -z "${DOCKERFILE_PATH}" ]; then
            echo "No Dockerfile found in the repository."
            exit 1
          fi

          echo "DOCKERFILE_PATH=${DOCKERFILE_PATH}" >> $GITHUB_OUTPUT
          echo "DOCKERFILE_DIR=${DOCKERFILE_PATH/\/Dockerfile.*}" >> $GITHUB_OUTPUT

      # -----------------
      # Gathering Informations: Prepare Release Matrix 
      #
      - name: 'Prepare Releases Matrix'
        id: releases_matrix 
        shell: bash
        run: |
          parsed_matrix=$(yq -o=j -I=0 '.' .cicd/releases/releases.yml | jq -c)
          echo "RELEASES_MATRIX=${parsed_matrix}" >> $GITHUB_OUTPUT

      # -----------------
      # Gathering Informations: Extract Repository Metadata (tags, labels)
      #
      - name: 'Extract Repository Metadata'
        id: repository_metadata
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

  # -----------------
  # Quality Assurance
  #
  quality_assurance:
     needs: [ gathering_informations ]
     name: "QA: Linting"
     runs-on: ubuntu-latest
     steps:

      # -----------------
      # Linter: Checkout 
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -----------------
      # Linter: Hadolint
      - uses: ./.github/actions/linting/docker/hadolint
        with:
          file: ${{ needs.gathering_informations.outputs.DOCKERFILE_PATH }}
          ignoreRule: "SC1008,SC2174"

  
  # -----------------
  # Building & Pushing 
  #
  builder:
    name: "Build: Github Package"
    needs: [ gathering_informations, quality_assurance ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix: ${{ fromJson(needs.gathering_informations.outputs.RELEASES_MATRIX) }}
    steps:
      
      # -----------------
      # Builder: Checkout 
      #
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -----------------
      # Builder: Prepare Docker Build Arguments
      #
      - name: 'Prepare - Docker Build Arguments'
        id: prepare_build_arguments 
        shell: bash
        run: |
          BUILD_ARGUMENTS="$(
            echo "${{ toJSON(matrix.build.arguments) }}" \
            | yq -r 'to_entries | .[] | "--build-arg " + "\""+ .key + "=" + .value + "\""'
          )";
          BUILD_ARGUMENTS="'$(echo ${BUILD_ARGUMENTS})'"
          echo "BUILD_ARGUMENTS=${BUILD_ARGUMENTS}" >> $GITHUB_OUTPUT

      # -----------------
      # Builder: Prepare Docker Lables 
      #
      - name: 'Prepare - Docker Labels'
        id: prepare_lables
        shell: bash
        run: |
          labels="$( \
            jq -r \
            '.labels | to_entries[] | "\(.key)=\"\(.value)\""' \
            <<< '${{ needs.prepare.outputs.REPOSITORY_METADATA }}'\
          )";
          # append labels to final docker image
          echo "${labels//\//\\\/}" | while read -r label; do 
            sed -i "/^FROM/a LABEL $label" ${{ needs.gathering_informations.outputs.DOCKERFILE_PATH }};
          done

      # -----------------
      # Builder: Prepare Docker Tag 
      #
      - name: 'Prepare - Docker Tag'
        id: prepare_tag
        shell: bash
        run: |

          latest_tag="$( \
            jq -r '.tags[0]' <<< '${{ needs.gathering_informations.outputs.REPOSITORY_METADATA }}' \
          )";

          TAG_CURRENT="$(echo ${latest_tag} | sed 's/:/\/'${{ matrix.name }}':/' )"
          echo "TAG_CURRENT=${TAG_CURRENT}" >> $GITHUB_OUTPUT

          TAG_LATEST="$(echo ${TAG_CURRENT} | sed -s 's/:.*/:latest/g' )"
          echo "TAG_LATEST=${TAG_LATEST}" >> $GITHUB_OUTPUT

      # -----------------
      # Builder: Github package 
      # 
      - uses: ./.github/actions/building/docker/github
        with:

          # Required 
          auth_token:         ${{ github.token }}
          dockerfile_context: ${{ needs.gathering_informations.outputs.DOCKERFILE_DIR }} 
          dockerfile_path:    ${{ needs.gathering_informations.outputs.DOCKERFILE_PATH }} 
          
          # Optional
          docker_build_arguments:   ${{ steps.prepare_build_arguments.outputs.BUILD_ARGUMENTS }}
          docker_build_tag_current: ${{ steps.prepare_tag.outputs.TAG_CURRENT }}
          docker_build_tag_latest:  ${{ steps.prepare_tag.outputs.TAG_LATEST }}
